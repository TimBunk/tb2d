#include "laser.h"
#include "player.h"

Laser::Laser(Shader* debug, Camera * camera, Shader * shader, b2World * world) : B2Entity::B2Entity(camera, shader, world)
{
	raycast = new RaycastCallBack();
	raycast->CreateLine(2000.0f, 50.0f, camera, debug, glm::vec4(1.0f, 1.0f, 1.0f, 1.0f));
}

Laser::~Laser()
{
	delete raycast;
}

void Laser::Update(glm::vec2 direction)
{
	raycast->Draw(this->GetGlobalPosition(), glm::atan(direction.y, direction.x));
	world->RayCast(raycast, b2Vec2(this->GetGlobalPosition().x * B2Entity::p2m, 540.0f * B2Entity::p2m), b2Vec2(960.0f * B2Entity::p2m, -1000.0f * B2Entity::p2m));
	RaycastOutput ro = raycast->GetOutput();
	if (ro.fixture != nullptr && static_cast<B2Entity*>(ro.fixture->GetUserData()) != NULL) {
		std::cout << "hit is true" << std::endl;
	}
}
